üìÑ Postmortem ‚Äî Problemas na Aplica√ß√£o Nginx em Cluster Kind

‚ö†Ô∏è Este postmortem refere-se a um ambiente de laborat√≥rio usando Kind. O objetivo foi exercitar troubleshooting, deploys com kubectl, exposi√ß√£o de servi√ßos e pr√°ticas de documenta√ß√£o t√©cnica.

üìç Local: Cluster Kubernetes local (teste-local)

‚ö†Ô∏è Impacto Instabilidade nos componentes cr√≠ticos do Control Plane, afetando a opera√ß√£o do cluster.


üìå Resumo

Durante testes em um cluster Kubernetes local utilizando o Kind, ocorreram falhas relacionadas √† estabilidade dos componentes do cluster (como o `kube-controller-manager`kube-scheduler
), problemas de conectividade e TLS entre componentes internos, reinicializa√ß√µes em loop (`CrashLoopBackOff`) e dificuldade em acessar a aplica√ß√£o NGINX via NodePort. O incidente impactou a disponibilidade do ambiente de testes por aproximadamente 40 minutos.



üïí Linha do Tempo dos Eventos

| Hor√°rio (UTC) | Evento |
|---------------|--------|
| 02:20         | V√°rios componentes do cluster indicam sucesso no cache sync (`Caches are synced`). |
| 02:23         | CrashLoopBackOff` detectado em componentes como `controller-manager` e `scheduler`. |
| 02:29         | kube-controller-manager` falha com erro de TLS: `context deadline exceeded` ao tentar recuperar o lease via HTTPS (porta 6443). |
| 02:30         | Perda de elei√ß√£o de l√≠der (`leaderelection lost`) ‚Üí controlador entra em estado inst√°vel. |
| 02:50         | Cluster Kind deletado e recriado. |
| 02:45         | Recria√ß√£o do deployment NGINX ‚Üí Sucesso. |
| 02:54         | Servi√ßo exposto via NodePort (porta 30440). |
| 02:55         | Aplica√ß√£o NGINX acess√≠vel via IP Docker (`{{KIND_CONTROL_PLANE_IP}}:30440`). |
| 02:56         | Servi√ßo exposto com sucesso usando kubectl expose deployment 
| 03:00         | Confirmado: servi√ßo do NGINX dispon√≠vel em (`{{KIND_CONTROL_PLANE_IP}}:30440`). |



üîç Causa Raiz

- `kube-controller-manager` falhou ao renovar o lease de lideran√ßa por timeout/TLS.
- Comunica√ß√£o interna inst√°vel com a API do Kubernetes (`https://{{KIND_CONTROL_PLANE_IP}}:6443`).
- CrashLoopBackOff ocorreu devido √† perda de lideran√ßa e falha na reconex√£o autom√°tica de componentes. 
- O servi√ßo do kube-apiserver estava acess√≠vel, mas houve problema de comunica√ß√£o interna entre os controladores e a API. 


 üõ†Ô∏è Solu√ß√µes Implementadas

-  Investiga√ß√£o inicial, Verifica√ß√£o dos pods (kubectl get pods -n kube-system).An√°lise dos logs do kube-scheduler e kube-controller-manager.
- Recria√ß√£o do cluster Kind (`kind delete cluster` + `kind create cluster`).
- Novo deployment NGINX com `kubectl create deployment nginx --image=nginx`.
- Confirma√ß√£o do acesso √† aplica√ß√£o via `curl` e navegador.


‚úÖ Li√ß√µes Aprendidas

1. TLS/lease failures s√£o comuns ap√≥s falhas ou rein√≠cios parciais instabilidades no Kind.
2. A comunica√ß√£o entre kube-scheduler e etcd deve ser monitorada para evitar problemas de Leader Election.
3. A sobrecarga de recursos pode impactar a performance do Control Plane, exigindo ajustes de configura√ß√£o
4. O monitoramento do etcd √© essencial para prevenir falhas no cluster
5. CrashLoopBackOff de componentes cr√≠ticos indica que o cluster est√° corrompido ou parcialmente dispon√≠vel, o que justifica um reset completo. 


üõ°Ô∏è A√ß√µes Corretivas e Preventivas

- [ ] Automatizar verifica√ß√£o da sa√∫de dos componentes com `kubectl get pods -A`.
- [ ] Criar script de bootstrap para deploy e expose de aplica√ß√µes de teste.
- [ ] Adicionar alias: `alias kind-ip="docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane"`.
- [ ] Criar script de sanity check para sa√∫de do cluster.
- [ ] Incluir testes de TLS entre componentes com kubectl logs e curl --cacert para troubleshooting detalhado. 


üí° Como transform√°-lo em algo altamente positivo:
- Aprendi a identificar falhas no ciclo de vida de pods com `CrashLoopBackOff` e entender as causas mais comuns.
- Compreendi como o l√≠der de controle (controller manager) depende de recursos TLS v√°lidos e sincroniza√ß√£o com o etcd.
- Melhorei minhas habilidades em troubleshooting de clusters locais, especialmente com `kind`, `kubectl logs` e `describe`.



